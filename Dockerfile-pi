#--------- Generic stuff all our Dockerfiles should start with so we get caching ------------
ARG DISTRO=debian
ARG IMAGE_VERSION=buster
ARG IMAGE_VARIANT=slim
FROM kartoza/postgis:$DISTRO-$IMAGE_VERSION-$IMAGE_VARIANT

# Reset ARG for version
ARG IMAGE_VERSION
ARG POSTGRES_MAJOR_VERSION=13
ARG POSTGIS_MAJOR=3

# RUN set -eux \
#     && export DEBIAN_FRONTEND=noninteractive \
#     && apt-get upgrade;apt-get update \
#     && sh -c "echo \"deb http://apt.postgresql.org/pub/repos/apt/ ${IMAGE_VERSION}-pgdg main\" > /etc/apt/sources.list.d/pgdg.list" \
#     && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc -O- | apt-key add - \
#     && apt-get -y --purge autoremove \
#     && apt-get clean \
#     && rm -rf /var/lib/apt/lists/* \
#     && dpkg-divert --local --rename --add /sbin/initctl

# # -------------Application Specific Stuff ----------------------------------------------------

# # We add postgis as well to prevent build errors (that we dont see on local builds)
# # on docker hub e.g.
# # The following packages have unmet dependencies:
# RUN set -eux \
#     && export DEBIAN_FRONTEND=noninteractive \
#     &&  apt-get update \
#     && apt-get -y --no-install-recommends install postgresql-client-${POSTGRES_MAJOR_VERSION} \
#         postgresql-common postgresql-${POSTGRES_MAJOR_VERSION} \
#         postgresql-${POSTGRES_MAJOR_VERSION}-postgis-${POSTGIS_MAJOR} \
#         netcat postgresql-${POSTGRES_MAJOR_VERSION}-ogr-fdw \
#         postgresql-${POSTGRES_MAJOR_VERSION}-postgis-${POSTGIS_MAJOR}-scripts \
#         postgresql-plpython3-${POSTGRES_MAJOR_VERSION} postgresql-${POSTGRES_MAJOR_VERSION}-pgrouting \
#         postgresql-server-dev-${POSTGRES_MAJOR_VERSION} postgresql-${POSTGRES_MAJOR_VERSION}-cron

# RUN echo $POSTGRES_MAJOR_VERSION >/tmp/pg_version.txt

# Pull base image
FROM python:3.9

#Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /code

# GDAL Dependencies
RUN apt-get update &&\
    apt-get install -y binutils libproj-dev gdal-bin
# Install dependencies
COPY Pipfile Pipfile.lock /code/
RUN pip install pipenv && pipenv install --system

# Copy project
COPY . /code/
